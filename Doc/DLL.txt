A DLL can define two kinds of functions: exported and internal. The exported 
functions are intended to be called by other modules, as well as from within 
the DLL where they are defined. Internal functions are typically intended to 
be called only from within the DLL where they are defined. Although a DLL can 
export data, its data is generally used only by its functions. However, there 
is nothing to prevent another module from reading or writing that address.

DLLs provide a way to modularize applications so that their functionality can
be updated and reused more easily. DLLs also help reduce memory overhead when
several applications use the same functionality at the same time, because 
although each application receives its own copy of the DLL data, the 
applications share the DLL code.

The Windows application programming interface (API) is implemented as a set 
of DLLs, so any process that uses the Windows API uses dynamic linking.

### About Dynamic-Link Libraries

Dynamic linking allows a module to include only the information needed to locate an exported DLL function at load time or run time. Dynamic linking differs from the more familiar static linking, in which the linker copies a library function's code into each module that calls it.


### Types of Dynamic Linking

### There are two methods for calling a function in a DLL:
1) In load-time dynamic linking. 
A module makes explicit calls to exported DLL functions as if they were local
functions. This requires you to link the module with the import library for 
the DLL that contains the functions. An import library supplies the system 
with the information needed to load the DLL and locate the exported DLL 
functions when the application is loaded.

2) In run-time dynamic linking. 
A module uses the LoadLibrary or LoadLibraryEx 
function to load the DLL at run time. After the DLL is loaded, the module 
calls the GetProcAddress function to get the addresses of the exported DLL 
functions. The module calls the exported DLL functions using the function 
pointers returned by GetProcAddress. This eliminates the need for an import 
library.


### DLLs and Memory Management

Every process that loads the DLL maps it into its virtual address space. 
After the process loads the DLL into its virtual address, it can call the 
exported DLL functions.

The system maintains a per-process reference count for each DLL. When a 
thread loads the DLL, the reference count is incremented by one. When the 
process terminates, or when the reference count becomes zero (run-time 
dynamic linking only), the DLL is unloaded from the virtual address space 
of the process.

Like any other function, an exported DLL function runs in the context of 
the thread that calls it. Therefore, the following conditions apply:

The threads of the process that called the DLL can use handles opened by
a DLL function. Similarly, handles opened by any thread of the calling 
process can be used in the DLL function.

The DLL uses the stack of the calling thread and the virtual address space
of the calling process.

The DLL allocates memory from the virtual address space of the calling 
process.

