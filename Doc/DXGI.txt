
DXGI's purpose is to communicate with the kernel mode driver and the system 
hardware. DXGI recognizes that some parts of graphics evolve more slowly than
others. The primary goal of DXGI is to manage low-level tasks that can be 
independent of the DirectX graphics runtime. 

DXGI provides a common framework for future graphics components; the first 
component that takes advantage of DXGI is Microsoft Direct3D 10.

In previous versions of Direct3D, low-level tasks like enumeration of hardware 
devices, presenting rendered frames to an output, controlling gamma, and managing 
a full-screen transition were included in the Direct3D runtime. These tasks are 
now implemented in DXGI. 

An application can access DXGI directly, or call the Direct3D APIs in D3D11_1.h, 
D3D11.h, D3D10_1.h, or D3D10.h, which handles the communications with DXGI for 
you. You may want to work with DXGI directly if your application needs to 
enumerate devices or control how data is presented to an output.

An adapter is an abstraction of the hardware and the software capability of 
your computer. There are generally many adapters on your machine. Some devices 
are implemented in hardware (like your video card) and some are implemented 
in software (like the Direct3D reference rasterizer). Adapters implement 
functionality used by a graphic application.


When enumerating these pieces of hardware, DXGI creates an IDXGIOutput1 interface 
for each output (or monitor) and an IDXGIAdapter2 interface for each video card 
(even if it is a video card built into a motherboard). Enumeration is done by 
using an IDXGIFactory interface call, IDXGIFactory::EnumAdapters, to return a set 
of IDXGIAdapter interfaces that represent the video hardware.

DXGI 1.1 added the IDXGIFactory1 interface. IDXGIFactory1::EnumAdapters1 returns 
a set of IDXGIAdapter1 interfaces that represents the video hardware.
If you want to select specific video hardware capabilities when you use Direct3D 
APIs, we recommend that you iteratively call the D3D11CreateDevice or 
D3D11CreateDeviceAndSwapChain function with each adapter handle and possible 
hardware feature level. This function succeeds if the feature level is supported 
by the specified adapter.


Presentation

Your application's job is to render frames and ask DXGI to present those frames 
to the output. If the application has two buffers available, it can render one 
buffer while presenting another one. The application might require more than two 
buffers depending on the time it takes to render a frame or the desired frame 
rate for presentation.


A swap chain has one front buffer and one or more back buffers. Each application 
creates its own swap chain. To maximize the speed of the presentation of the data 
to an output, a swap chain is almost always created in the memory of a display 
sub-system. The display sub-system (which is often a video card but could be 
implemented on a motherboard) contains a GPU, a digital to analog converter, 
and memory. The swap chain is allocated within this memory to make presentation 
very fast. The display sub-system presents the data in the front buffer to the 
output.

A swap chain is set up to draw in full-screen or windowed mode, this eliminates 
the need to know whether an output is windowed or full screen. A full-screen mode 
swap chain can optimize performance by switching the display resolution.

Create a Swap Chain

Differences between Direct3D 9 and Direct3D 10: Direct3D 10 is the first graphics 
component to use DXGI. DXGI has some different swap chain behaviors.
In DXGI, a swap chain is tied to a window when the swap chain is created. This 
change improves performance and saves memory. Previous versions of Direct3D 
allowed the swap chain to change the window that the swap chain is tied to.
In DXGI, a swap chain is tied to a rendering device on creation. The device 
object that the Direct3D create device functions return implements the IUnknown 
interface. You can call QueryInterface to query for the device's corresponding 
IDXGIDevice2 interface. A change to the rendering device requires the swap chain 
to be recreated. In DXGI, the swap effects available are DXGI_SWAP_EFFECT_DISCARD 
and DXGI_SWAP_EFFECT_SEQUENTIAL. Starting with Windows 8 
the DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL swap effect is also available. 

A swap chain's buffers are created at a particular size and in a particular 
format. The application specifies these values (or you can inherit the size 
from the target window) at startup, and can then optionally modify them as the 
window size changes in response to user input or program events. After you create 
the swap chain, you will typically want to render images into it. 

After your application renders a frame into a swap-chain buffer, call 
IDXGISwapChain1::Present1. The application can then go render the next image.

### Care and Feeding of the Swap Chain
After you render your image, call IDXGISwapChain1::Present1 and go render the 
next image. That is the extent of your responsibility. If you previously called 
IDXGIFactory::MakeWindowAssociation, the user can press the Alt-Enter key 
combination and DXGI will transition your application between windowed and 
full-screen mode. IDXGIFactory::MakeWindowAssociation is recommended, because a 
standard control mechanism for the user is strongly desired. While you don't have 
to write any more code than has been described, a few simple steps can make your 
application more responsive. The most important consideration is the resizing of 
the swap chain's buffers in response to the resizing of the output window. 
Naturally, the application's best route is to respond to WM_SIZE, and call 
IDXGISwapChain::ResizeBuffers, passing the size contained in the message's 
parameters. This behavior obviously makes your application respond well to the 
user when he or she drags the window's borders, but it is also exactly what 
enables a smooth full-screen transition. Your window will receive a WM_SIZE 
message whenever such a transition happens, and calling 
IDXGISwapChain::ResizeBuffers is the swap chain's chance to re-allocate the 
buffers' storage for optimal presentation. This is why the application is 
required to release any references it has on the existing buffers before it 
calls IDXGISwapChain::ResizeBuffers.

Failure to call IDXGISwapChain::ResizeBuffers in response to switching to 
full-screen mode (most naturally, in response to WM_SIZE), can preclude the 
optimization of flipping, wherein DXGI can simply swap which buffer is being 
displayed, rather than copying a full screen's worth of data around.

IDXGISwapChain1::Present1 will inform you if your output window is entirely 
occluded via DXGI_STATUS_OCCLUDED. When this occurs, we recommended that your 
application go into standby mode (by calling IDXGISwapChain1::Present1 with 
DXGI_PRESENT_TEST) since resources used to render the frame are wasted. 
Using DXGI_PRESENT_TEST will prevent any data from being presented while still 
performing the occlusion check. Once IDXGISwapChain1::Present1 returns S_OK, 
you should exit standby mode; do not use the return code to switch to standby 
mode as doing so can leave the swap chain unable to relinquish full-screen mode.

The Direct3D 11.1 runtime, which is available starting with Windows 8, provides 
a flip-model swap chain (that is, a swap chain that has the 
DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL value set in the SwapEffect member of 
DXGI_SWAP_CHAIN_DESC or DXGI_SWAP_CHAIN_DESC1). When you present frames to an 
output with a flip-model swap chain, DXGI unbinds the back buffer from all 
pipeline state locations, like an output-merger render target, that write to 
back buffer 0.
 
Therefore, we recommend that you call ID3D11DeviceContext::OMSetRenderTargets 
immediately before you render to the back buffer. For example, don't call 
OMSetRenderTargets and then perform compute shader work that doesn't end up 
rendering to the resource. For more info about flip-model swap chains and their 
benefits, see DXGI Flip Model.

### Handling Window Resizing
You can use the IDXGISwapChain::ResizeBuffers method to handle window resizing. 
Before you call ResizeBuffers, you must release all outstanding references to 
the swap chain's buffers. The object that typically holds a reference to a swap 
chain's buffer is a render-target-view.


### Choosing the DXGI Output and Size
By default, DXGI chooses the output that contains most of the client area of the 
window. This is the only option available to DXGI when it goes full-screen itself 
in response to alt-enter. If the application chooses to go to full-screen mode 
by itself, then it can call IDXGISwapChain::SetFullscreenState and pass an 
explicit IDXGIOutput1 (or NULL, if the application is happy to let DXGI decide).
To resize the output while either full screen or windowed, we recommend to call 
IDXGISwapChain::ResizeTarget, since this method resizes the target window also. 
Since the target window is resized, the operating system sends WM_SIZE, and your 
code will naturally call IDXGISwapChain::ResizeBuffers in response. It's thus a 
waste of effort to resize your buffers, and then subsequently resize the target.


### Destroying a Swap Chain

You may not release a swap chain in full-screen mode because doing so may create 
thread contention which will cause DXGI to raise a non-continuable exception. 
Before releasing a swap chain, first switch to windowed mode using 
IDXGISwapChain::SetFullscreenState( FALSE, NULL ) and then call IUnknown::Release.

A DXGI swap chain relinquishes full-screen mode only when absolutely necessary. 
This means that you can debug a full-screen application using multiple monitors, 
as long as the debug window doesn't overlap the swap chain's target window. 
Alternatively, you can prevent mode switching altogether by not setting the 
DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH flag.



### DXGI Responses from DLLMain
Because a DllMain function can't guarantee the order in which it loads and 
unloads DLLs, we recommend that your app's DllMain function not call Direct3D 
or DXGI functions or methods, including functions or methods that create or 
release objects. If your app's DllMain function calls into a particular 
component, that component might call another DLL that isn't present on the 
operating system, which causes the operating system to crash. Direct3D and DXGI 
might load a set of DLLs, typically a set of drivers, that differs from computer 
to computer. Therefore, even if your app doesn t crash on your development and 
test computers when its DllMain function calls Direct3D or DXGI functions or 
methods, it might crash when it runs on another computer.

To prevent you from creating an app that might cause the operating system to 
crash, DXGI provides the following responses in the specified situations:
If your app's DllMain function releases its last reference to a DXGI factory, 
DXGI raises an exception.
If your app's DllMain function creates a DXGI factory, DXGI returns an error code.


### DirectX Graphics Infrastructure (DXGI): Best Practices

Microsoft DirectX Graphics Infrastructure (DXGI) is a new subsystem that was 
introduced with Windows Vista that encapsulates some of the low-level tasks 
that are needed by Direct3D 10, 10.1, 11, and 11.1. From the perspective of 
a Direct3D 9 programmer, DXGI encompasses most of the code for enumeration, 
swap-chain creation, and presentation that previously was packed into the 
Direct3D 9 APIs. When you port an app to DXGI and Direct3D 10.x and Direct3D 
11.x, you need to take some considerations into account to ensure that the 
process runs smoothly. 

1)  Full-Screen Issues
In porting from Direct3D 9 to DXGI and to Direct3D 10.x or Direct3D 11.x, 
issues associated with moving from windowing to full-screen mode often may 
cause headaches for developers. The main problems arise because Direct3D 9 
applications, unlike DXGI applications, require a more hands-on approach to 
tracking window styles and window states. When the mode-changing code is 
ported to run on DXGI, it often causes unexpected behavior.
Often, Direct3D 9 applications handled the transition into full-screen mode 
by setting the resolution of the front buffer, forcing the device into 
full-screen exclusive mode, and then setting the back buffer resolutions to 
match. A separate path was used for changes to window size because they had 
to be managed from the window process whenever the application received a 
WM_SIZE message. 

DXGI attempts to simplify this approach by combining the two cases. For example, 
when the window border is dragged in windowed mode, the application receives a 
WM_SIZE message. DXGI intercepts this message and automatically resizes the 
front buffer. All that the application needs to do is call 
IDXGISwapChain::ResizeBuffers to resize the back buffer to the size that was 
passed as parameters in WM_SIZE. Similarly, when the application needs to switch 
between full-screen and windowed mode, the application can simply call 
IDXGISwapChain::SetFullscreenState. DXGI resizes the front buffer to match the 
newly selected full-screen mode, and it sends a WM_SIZE message to the 
application. The application again calls ResizeBuffers, just as it would if 
the window border was dragged.

The methodology of the preceding explanation follows a very particular path. 
DXGI set the full-screen resolution to the desktop resolution by default. 
Many applications, however, switch to a preferred full-screen resolution. 
In such a case, DXGI provides IDXGISwapChain::ResizeTarget. This should be 
called before calling SetFullscreenState. Although these methods can be called 
in the opposite order (SetFullscreenState first, followed by ResizeTarget), 
doing so causes an extra WM_SIZE message to be sent to the application. 
Doing so can also cause flickering, since DXGI could be forced to perform 
two mode changes. After calling SetFullscreenState, it is advisable to call 
ResizeTarget again with the RefreshRate member of DXGI_MODE_DESC zeroed out. 
This amounts to a no-operation instruction in DXGI, but it can avoid issues 
with the refresh rate, which are discussed next.

When in full-screen mode, the Desktop Window Manager (DWM) is disabled. 
DXGI can perform a flip to present the back buffer contents instead of doing 
a blit, which it would do in windowed mode. This performance gain can be undone, 
however, if certain requirements are not met. To ensure that DXGI does a flip 
instead of a blit, the front buffer and back buffer must be sized identically. 
If the application correctly handles its WM_SIZE messages, this should not be 
a problem. Also, the formats must be identical.

The problem for most applications is the refresh rate. The refresh rate that 
is specified in the call to ResizeTarget must be a refresh rate that is 
enumerated by the IDXGIOutput object that the swap chain is using. DXGI can 
automatically calculate this value if the application zeroes out the RefreshRate 
member of DXGI_MODE_DESC that is passed into ResizeTarget. It is important 
not to assume that certain refresh rates will always be supported and to simply 
hard-code a value. Often, developers choose 60 Hz as the refresh rate, not 
knowing that the enumerated refresh rate from the monitor is approximately 
60,000 / 1,001 Hz from the monitor. If the refresh rate does not match the 
expected refresh rate of 60, DXGI is forced to perform a blit in full-screen 
mode instead of a flip.

The last issue that developers often face is how to change full-screen 
resolutions while remaining in full-screen mode. Calling ResizeTarget and 
SetFullscreenState sometimes succeeds, but the full-screen resolution remains 
the desktop resolution. Also, developers may create a full-screen swap chain 
and give a specific resolution, only to find that DXGI defaults to the desktop 
resolution regardless of the numbers passed in. Unless otherwise instructed, 
DXGI defaults to the desktop resolution for full-screen swap chains. 

When creating a full-screen swap chain, the Flags member of the 
DXGI_SWAP_CHAIN_DESC structure must be set to 
DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH to override DXGI's default behavior. 
This flag also can be passed to ResizeTarget to enable or disable this 
functionality dynamically.









