The Microsoft source-code annotation language (SAL) provides a set of annotations 
that you can use to describe how a function uses its parameters, the assumptions that
 it makes about them, and the guarantees that it makes when it finishes. 

The annotations are defined in the header file <sal.h>. Visual Studio code analysis for 
C++ uses SAL annotations to modify its analysis of functions. For more information 
about SAL 2.0 for Windows driver development, see SAL 2.0 Annotations for Windows Drivers.

Natively, C and C++ provide only limited ways for developers to consistently express intent
 and invariance. By using SAL annotations, you can describe your functions in greater detail
 so that developers who are consuming them can better understand how to use them.

Input to called function	                           _In_	Data is passed to the called function, and is treated as read-only.
Input to called function, and output to caller       _Inout_	Usable data is passed into the function and potentially is modified.
Output to caller	                                           _Out_	The caller only provides space for the called function to write to. The called function writes data into that space.
Output of pointer to caller	                           _Outptr_	Like Output to caller. The value that's returned by the called function is a pointer.